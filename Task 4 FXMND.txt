4.1 Your task is to create a custom argument matcher that matches a Person object based on a provided age range.
The matcher should return true if the age of the Person object is within the specified range, inclusive.

Define a class Person with at least one field: int age.

Implement a custom argument matcher that matches Person objects within a given age range.

Use the matcher in a test case to verify that a mock method is called with a Person of the correct age.



4.2 You are testing a UserService that relies on a UserRepository. You need to ensure that the mock UserRepository:

Is serializable.

Has a default answer that logs unstubbed method invocations.

Captures method invocation details for debugging purposes.


Create a mock UserRepository with the following requirements:

Implement the repository as a serializable mock.

Ensure that any unstubbed call is answered by logging the invocation to the console.

Attach an invocation listener that records each method call (method name and arguments) to a list.

Write at least two test cases that use this mock:

The first test should invoke a stubbed method and assert the expected behavior.

The second test should invoke an unstubbed method and verify that the default answer is applied and the invocation details are recorded.
5.1 Exercise
You have a class NotificationService with a void method sendAlert(String message). 
This method sends an alert message to an operations team. The sending process 
involves two steps: validating the message and then sending it through an alerting mechanism. 
If the message is null or empty, a custom InvalidAlertException should be thrown.

public class NotificationService {
    private AlertGateway gateway;

    public NotificationService(AlertGateway gateway) {
        this.gateway = gateway;
    }

    public void sendAlert(String message) {
        if (message == null || message.trim().isEmpty()) {
            throw new InvalidAlertException("Alert message is invalid");
        }
        gateway.send(message);
    }
}


Task:

Write a Mockito-based unit test for the sendAlert method that verifies the following:

The send method on the gateway is called with the correct message when sendAlert is invoked with a valid message.

An InvalidAlertException is thrown when sendAlert is invoked with a null message.

The send method on the gateway is never called when an InvalidAlertException is thrown.

5.2 Exercise
Test an abstract class that represents a Shape, which includes an abstract method calculateArea().


public abstract class Shape {
    private final String name;
   
    public Shape(String name) {
        this.name = name;
    }
   
    public String getName() {
        return name;
    }

    public abstract double calculateArea();
}

Tasks:

Create a mock for the Shape class using Mockito and stub the calculateArea() method to return a fixed value for testing.

Write a JUnit 5 test that uses an anonymous subclass of Shape to test the getName() method functionality.

Implement a parameterized test in JUnit 5 to verify the calculateArea() method against multiple sets of data for different shapes (e.g., Circle, Square).

Use JUnit 5's @TestFactory to dynamically generate tests for different Shape subclasses that are not yet implemented, providing different values for name.

Write a custom JUnit 5 extension that outputs the name of the shape before each test and validates that the name is not null or empty after each test.

Apply the @Testable annotation to a method within an interface that Shape might implement and explain how it would assist in testing with JUnit 5.

5.3 Exercise
Write a unit test for a class that contains a static utility method. Use Mockito to mock the static method, 
and then use PowerMock to do the same. Observe the differences in approaches and limitations.


Task 1: Using Mockito

Create a Java class UtilityClass with a static method public static String getStatus().

Use Mockito's mockStatic() within a try-with-resources block to mock the getStatus method.

Stub the getStatus method to return "Mocked Status".

Write a test that asserts the mocked value is returned when getStatus is called.


Task 2: Using PowerMock Legacy way with Java 8 and JUnit 4.

Annotate the test class with @RunWith(PowerMockRunner.class) and @PrepareForTest({UtilityClass.class}).

Use PowerMockito.mockStatic(UtilityClass.class) to mock the getStatus method outside of a try-with-resources block.

Stub the getStatus method as done previously.

Write a test that verifies the getStatus method is called exactly once and returns the mocked value.


Task 3: Reflection and Comparison

After completing both tests, reflect on the usage, scope, and ease of testing with Mockito and PowerMock.

